# Adaboost

def Bossted_tree(d):
#    
#                   
#    def splitindex(fetu):   
#        Gini_Value=np.empty([1,len(top500)], dtype=int)*0.0
#        for i in range(0,len(top500)):#
#          if len(fetu[fetu[:,i]>=0,-1])==0 or len(fetu[fetu[:,i]==0,-1])==0:    
#        
#                Gini_Value[0,i]=1
#          else:        
#                Posit_Posit=np.sum(weights[fetu[fetu[:,i]>=0,len(top500)]==1,0])/np.sum(weights[fetu[:,i]>=0,0])
#                                               
#                Posit_Negat=1-Posit_Posit
#                Negat_Posit=np.sum(weights[np.where(fetu[fetu[:,i]==0,len(top500)]==0),0])/np.sum(weights[fetu[:,i]==0,0])
#                
#                Negat_Negat=1-Negat_Posit
#                 
#                Gini_Value[0,i]=((1-(Posit_Posit**2)-(Posit_Negat**2))*(len(fetu[fetu[:,i]==1,len(top500)])/len(fetu)))+((1-(Negat_Posit**2)-(Negat_Negat**2))*(len(fetu[fetu[:,i]==0,len(top500)])/len(fetu)))
#            
#        return(np.argmin(Gini_Value))
#
#           
#    
#    def get_split(feturematrix):
#        split=splitindex(feturematrix)
#        group =list(feturematrix[feturematrix[:,split]==1,]),list(feturematrix[feturematrix[:,split]==0,])
#        return {'index':splitindex(feturematrix),  'groups':group}
#    def to_terminal(group):
#    	outcomes = [row[-1] for row in group]
#    	return max(set(outcomes), key=outcomes.count)
# 
#
#    def split(node, max_depth, min_size, depth):
#    	left, right = node['groups']
#    	del(node['groups'])
#    	
#    	if not left or not right:
#    		node['left'] = node['right'] = to_terminal(left + right)
#    		return
#    	
#    	if depth >= max_depth:
#    		node['left'], node['right'] = to_terminal(left), to_terminal(right)
#    		return
#    	
#    	if len(left) <= min_size:
#    		node['left'] = to_terminal(left)
#    	else:
#    		node['left'] = get_split(np.asarray(left))
#    		split(node['left'], max_depth, min_size, depth+1)
#    	
#    	if len(right) <= min_size:
#    		node['right'] = to_terminal(right)
#    	else:
#    		node['right'] = get_split(np.asarray(right))
#    		split(node['right'], max_depth, min_size, depth+1)
#     
#    def build_tree(train, max_depth, min_size):
#    	root = get_split(train)
#    	split(root, max_depth, min_size, 0)
#    	return root    
#
#        
#    def predict(node, row):
#    	if row[node['index']]>=0:
#    		if isinstance(node['left'], dict):
#    			return predict(node['left'], row)
#    		else:
#    			return node['left']
#    	else:
#    		if isinstance(node['right'], dict):
#    			return predict(node['right'], row)
#    		else:
#    			return node['right']
# 
#    
#    def decision_tree(train,test,max_depth , min_size):
#        tree=build_tree(train,10, 10)
#        predictions=list()
#        featurelist=list(test_matrix)
#        for row in featurelist:
#            prediction=predict(tree,row)
#            predictions.append(prediction)
#        count=0
#        for i in range(0,len(predictions)):
#        
#          if predictions[i]==Test_array[i,1]:
#            count=count+1
#        percent=count / len(predictions) 
#        zeroloss=1-percent
#        #print(percent)
#        return (zeroloss)
#    
#    def bagging_predict(trees, row):
#    	predictions = [predict(tree, row) for tree in trees]
#    	return max(set(predictions), key=predictions.count)
#    
#    
#       
#    #Boosted trees
#    Train_Y=np.empty([len(Train), 1], dtype=int)*0
#    for i in range (0,len(Train)):
#      Train_Y[i,0]=Train_array[i,1]
#        
#    Test_Y=np.empty([len(Test_array), 1], dtype=int)*0
#    for i in range (0,len(Test_array)):
#      Test_Y[i,0]=Test_array[i,1]
#        
#      
#    n=len(matrix)
#    weights=np.ones([n,1])
#    weights=np.array(np.divide(weights,n))
#    rules=list()
#    alpha=list()
#    Train_check=matrix
#        
#    for i in range(50):
#            print(i)
#            Train_check=np.multiply(weights,Train_check)
#            withlabels=np.append(Train_check,Train_Y,axis=1)
#            stump=build_tree(withlabels,10,10)
#            DT_pred=list()
#            for i in range(len(matrix)):
#                DT_pred.append(predict(stump,matrix[i]))
#            errors=([DT_pred[i] != Train_Y[i] for i in range(len(matrix))])
#            for i in range(len(errors)):
#                if errors[i]==True:
#                    errors[i]=1
#                else:
#                    errors[i]=0
#            e=(errors*np.asarray(weights).T).sum()
#            #SOMETHING HERE
#            alpha_t = 0.5 * math.log((1-e)/e)
#            w=np.zeros([n,1])
#            for i in range(n):
#                if errors[i] == 1:
#                    w[i,0] = weights[i,0] * math.exp(alpha_t)
#                else: 
#                    w[i,0] = weights[i,0] * math.exp(-alpha_t)
#            weights=np.array(w/w.sum())
#            rules.append(stump)
#            alpha.append(alpha_t)
###    
#    predictions=[bagging_predict(rules,row) for row in list (test_matrix)]
#    count=0
#    for i in range(0,len(predictions)):
#        
#     if predictions[i]==Test_array[i,1]:
#       count=count+1
#    percent=count / len(predictions) 
#    zeroloss=1-percent
#    print(percent)
#    return (zeroloss)
